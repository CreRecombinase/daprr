// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// elastic_donut
Rcpp::List elastic_donut(Rcpp::IntegerVector locus, Rcpp::NumericVector z, Rcpp::NumericMatrix X, double EM_thresh, const double alpha, Rcpp::NumericVector lambda, const double prior_init);
RcppExport SEXP _daprcpptest_elastic_donut(SEXP locusSEXP, SEXP zSEXP, SEXP XSEXP, SEXP EM_threshSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP prior_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type locus(locusSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type EM_thresh(EM_threshSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_init(prior_initSEXP);
    rcpp_result_gen = Rcpp::wrap(elastic_donut(locus, z, X, EM_thresh, alpha, lambda, prior_init));
    return rcpp_result_gen;
END_RCPP
}
// elastic_donut_sp
Rcpp::List elastic_donut_sp(Rcpp::IntegerVector locus, Rcpp::NumericVector z, Rcpp::S4 X, double EM_thresh, const double alpha, Rcpp::NumericVector lambda, const double prior_init);
RcppExport SEXP _daprcpptest_elastic_donut_sp(SEXP locusSEXP, SEXP zSEXP, SEXP XSEXP, SEXP EM_threshSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP prior_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type locus(locusSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type EM_thresh(EM_threshSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_init(prior_initSEXP);
    rcpp_result_gen = Rcpp::wrap(elastic_donut_sp(locus, z, X, EM_thresh, alpha, lambda, prior_init));
    return rcpp_result_gen;
END_RCPP
}
// zhat2BF
Rcpp::NumericVector zhat2BF(Rcpp::NumericVector z_hat);
RcppExport SEXP _daprcpptest_zhat2BF(SEXP z_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z_hat(z_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(zhat2BF(z_hat));
    return rcpp_result_gen;
END_RCPP
}
// new_splitter
Rcpp::IntegerVector new_splitter(Rcpp::IntegerVector locus_id);
RcppExport SEXP _daprcpptest_new_splitter(SEXP locus_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type locus_id(locus_idSEXP);
    rcpp_result_gen = Rcpp::wrap(new_splitter(locus_id));
    return rcpp_result_gen;
END_RCPP
}
// Esteps
Rcpp::NumericVector Esteps(Rcpp::NumericVector BF, Rcpp::NumericVector prior, Rcpp::IntegerVector rle);
RcppExport SEXP _daprcpptest_Esteps(SEXP BFSEXP, SEXP priorSEXP, SEXP rleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rle(rleSEXP);
    rcpp_result_gen = Rcpp::wrap(Esteps(BF, prior, rle));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_daprcpptest_elastic_donut", (DL_FUNC) &_daprcpptest_elastic_donut, 7},
    {"_daprcpptest_elastic_donut_sp", (DL_FUNC) &_daprcpptest_elastic_donut_sp, 7},
    {"_daprcpptest_zhat2BF", (DL_FUNC) &_daprcpptest_zhat2BF, 1},
    {"_daprcpptest_new_splitter", (DL_FUNC) &_daprcpptest_new_splitter, 1},
    {"_daprcpptest_Esteps", (DL_FUNC) &_daprcpptest_Esteps, 3},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_daprcpptest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
